fundamentals

  how do you manage DOM nodes using javascript?
    normally you might need to use these or more functions

      createElement
      getElementById
      setAttribute
      append

    example

      <body>
        <script type="module">
          // setting root div
          const rootElement = document.createElement('div')
          rootElement.setAttribute('id', 'root')
          document.body.append(rootElement)

          // appending hello world to root div
          const div = document.createElement('div')
          div.textContent = 'Hello world'
          div.className = 'container'
          rootElement.append(div)
        </script>
      </body>


    sources to look at:

      about the script tag
        https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attributes
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules
        https://github.com/mdn/js-examples/tree/master/modules

      the js functions that handle DOM
        https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
        https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById
        https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append

  how do you create and render elements with the raw React API?

    you will need to use these methods
      React.createElement
      ReactDOM.render

    these methods need the library react and react-dom

    example of a nested structure created with raw React API

      const rootElement = document.getElementById('root')

      const span1 = React.createElement('span', {children: 'Hello'})
      const span2 = React.createElement('span', {children: 'World'})

      const containerElement = React.createElement('div', {
        className: 'container',
        children: [span1, span2], // children can be a single primitive value or an array
      })

      ReactDOM.render(containerElement, rootElement)

  what does createElement returns in pure javascript?

    it returns an object that you can log the console

      some of their properties are
        $$typeof - to indicate that is in fact a react element
        key
        props - the second argument object that you pass to createElement
        ref
        type - the type of the html element that will be rendered. e.g. div

  is there a difference between creating elements with jsx and the raw react api?

    it seems it doesn't
      this code creates a react element with its raw api
        const element = React.createElement('div', {
          className: 'container',
          children: 'Hello World',
        })

      this code creates a react element with jsx
        const element = <div className="container">Hello World</div>

      both can be rendered to the page with the render method
        ReactDOM.render(element, document.getElementById('root'))

      you could console.log both elements and will get an object with the same properties

  what does babel does when imported as a script?

    it will search for any script tags with type="text/babel" and it will compile it
      javascript actually won't do anything to those script types

    babel can for example compile your jsx code to javascript code that uses the raw React API
      e.g.
        const ui = <h1 id="greeting">Hey there</h1>

      gets transformed to
        const ui = React.createElement('h1', {id: 'greeting', children: 'Hey there'})

    you can tests more examples here: https://babeljs.io/repl

  
