source: https://blog.fildon.me/what-is-memoization

what is memoization

  process of remembering previous results computations to be reused in the future

  e.g. 20 * 42 = 840 -> save this result so we don't calculate it again later when asked again

what should not be memoized?

  - cheap functions that don't require a lot of computation
  - functions that don't always return the same results given the same inputs (non-deterministic functions)
  - side effects because they still have to be done again regardless of the previous result
  - time dependent functions

  after that you should probably just have pure functions which will return the same output given the same input

the pseudocode for memoization

  - Receive the input

  - Check if this input has been seen before

  - If it was: return the result

  - If it wasn't: compute the result, store it along with the input. Return the result.


example of memoization

  const memoize = <Input extends PropertyKey, Result>(
    callback: (input: Input) => Result
  ) => {
    // 'memory' will store previous results
    const memory: Map<Input, Result> = new Map();

    // Return the newly memoized function
    return (input: Input) => {
      // If we haven't already seen this 'input'
      if (!memory.has(input)) {
        // Then call the "real" function and store the result in memory
        memory.set(input, callback(input));
      }

      // Return the result from memory
      return memory.get(input)!;
    };
  };